#!/usr/bin/env python3
"""
Comprehensive Translation System Fix for Smart Agriculture App
"""

import os
import re
import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """Run a command and handle output."""
    print(f"\nüîß {description}")
    print(f"Command: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=".")
        if result.returncode == 0:
            print(f"‚úÖ Success: {description}")
            if result.stdout.strip():
                print(f"Output: {result.stdout.strip()}")
        else:
            print(f"‚ùå Error: {description}")
            if result.stderr.strip():
                print(f"Error output: {result.stderr.strip()}")
            if result.stdout.strip():
                print(f"Standard output: {result.stdout.strip()}")
    except Exception as e:
        print(f"‚ùå Exception: {e}")

def check_babel_installation():
    """Check if babel is installed."""
    print("\nüîç Checking Babel installation...")
    try:
        import babel
        print(f"‚úÖ Babel installed: {babel.__version__}")
        return True
    except ImportError:
        print("‚ùå Babel not installed. Installing...")
        run_command("pip install babel flask-babel", "Installing Babel")
        return True

def fix_babel_config():
    """Create or fix babel.cfg."""
    print("\nüîß Fixing babel.cfg...")
    
    babel_config = """[python: **.py]
[jinja2: **/templates/**.html]
extensions=jinja2.ext.autoescape,jinja2.ext.with_
"""
    
    with open('babel.cfg', 'w', encoding='utf-8') as f:
        f.write(babel_config)
    print("‚úÖ babel.cfg updated")

def add_missing_config():
    """Add missing configuration to config.py."""
    print("\nüîß Updating config.py...")
    
    config_addition = """

    # Translation Configuration
    LANGUAGES = {
        'en': 'English',
        'hi': '‡§π‡§ø‡§Ç‡§¶‡•Ä'
    }
    BABEL_DEFAULT_LOCALE = 'hi'
    BABEL_DEFAULT_TIMEZONE = 'Asia/Kolkata'
"""
    
    # Read current config
    try:
        with open('config.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Check if LANGUAGES already exists
        if 'LANGUAGES' not in content:
            # Find the last class definition and add the config
            if 'class DevelopmentConfig' in content:
                # Add to DevelopmentConfig class
                content = content.replace(
                    'class DevelopmentConfig(Config):',
                    f'class DevelopmentConfig(Config):{config_addition}'
                )
                
                with open('config.py', 'w', encoding='utf-8') as f:
                    f.write(content)
                print("‚úÖ Added translation config to config.py")
            else:
                print("‚ö†Ô∏è Could not auto-update config.py - please add LANGUAGES config manually")
        else:
            print("‚úÖ Translation config already exists in config.py")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Could not update config.py: {e}")

def extract_and_update_translations():
    """Extract messages and update translation files."""
    print("\nüîß Extracting translatable strings...")
    
    # Extract messages
    run_command(
        "pybabel extract -F babel.cfg -k _l -o messages.pot .",
        "Extracting translatable strings to messages.pot"
    )
    
    # Update existing translation files
    print("\nüîß Updating translation files...")
    
    # Update Hindi translations
    run_command(
        "pybabel update -i messages.pot -d app/translations -l hi",
        "Updating Hindi translation file"
    )
    
    # Update English translations  
    run_command(
        "pybabel update -i messages.pot -d app/translations -l en",
        "Updating English translation file"
    )

def compile_translations():
    """Compile translation files."""
    print("\nüîß Compiling translation files...")
    
    run_command(
        "pybabel compile -d app/translations",
        "Compiling all translation files"
    )

def fix_empty_translations():
    """Fix empty translations in Hindi file."""
    print("\nüîß Fixing empty translations in Hindi file...")
    
    hi_po_path = "app/translations/hi/LC_MESSAGES/messages.po"
    
    # Common translations to add
    basic_translations = {
        "Dashboard": "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "Farms": "‡§ñ‡•á‡§§",
        "Crops": "‡§´‡§∏‡§≤‡•á‡§Ç",
        "Disease Scanner": "‡§∞‡•ã‡§ó ‡§∏‡•ç‡§ï‡•à‡§®‡§∞",
        "Profile": "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
        "Help": "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ",
        "Logout": "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü",
        "Login": "‡§≤‡•â‡§ó‡§ø‡§®",
        "Register": "‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£",
        "Home": "‡§π‡•ã‡§Æ",
        "Weather": "‡§Æ‡•å‡§∏‡§Æ",
        "Clear": "‡§∏‡§æ‡§´",
        "Smart Crop Care Assistant": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§ï",
        "Getting Started": "‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "Total Farms": "‡§ï‡•Å‡§≤ ‡§ñ‡•á‡§§",
        "Active Crops": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç",
        "Weather Alerts": "‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§≤‡§∞‡•ç‡§ü",
        "Quick Actions": "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø",
        "Add Farm": "‡§ñ‡•á‡§§ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        "Add Crop": "‡§´‡§∏‡§≤ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        "Scan Disease": "‡§∞‡•ã‡§ó ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç",
        "View Crops": "‡§´‡§∏‡§≤‡•á‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç",
        "Help & Support": "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®",
        "Schedule Irrigation": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç",
        "Weather Information": "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
        "Humidity": "‡§®‡§Æ‡•Ä",
        "Wind Speed": "‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§ó‡§§‡§ø",
        "Rain Forecast": "‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ",
        "Save": "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç",
        "Cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "Submit": "‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "Back": "‡§µ‡§æ‡§™‡§∏",
        "Next": "‡§Ö‡§ó‡§≤‡§æ",
        "Previous": "‡§™‡§ø‡§õ‡§≤‡§æ",
        "Edit": "‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "Delete": "‡§π‡§ü‡§æ‡§è‡§Ç",
        "Add": "‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        "Remove": "‡§π‡§ü‡§æ‡§è‡§Ç",
        "Update": "‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "Create": "‡§¨‡§®‡§æ‡§è‡§Ç",
        "Search": "‡§ñ‡•ã‡§ú",
        "Filter": "‡§´‡§ø‡§≤‡•ç‡§ü‡§∞",
        "Sort": "‡§ï‡•ç‡§∞‡§Æ‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡•á‡§Ç",
        "Settings": "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
        "About": "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
        "Contact": "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï",
        "English": "‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä",
        "Hindi": "‡§π‡§ø‡§Ç‡§¶‡•Ä",
        "Language": "‡§≠‡§æ‡§∑‡§æ",
        "Select Language": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "Farm Name": "‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§®‡§æ‡§Æ",
        "Crop Type": "‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
        "Area": "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤",
        "Location": "‡§∏‡•ç‡§•‡§æ‡§®",
        "Date": "‡§§‡§æ‡§∞‡•Ä‡§ñ",
        "Time": "‡§∏‡§Æ‡§Ø",
        "Status": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "Active": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø",
        "Inactive": "‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø",
        "Completed": "‡§™‡•Ç‡§∞‡•ç‡§£",
        "Pending": "‡§¨‡§ï‡§æ‡§Ø‡§æ",
        "Success": "‡§∏‡§´‡§≤‡§§‡§æ",
        "Error": "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        "Warning": "‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä",
        "Information": "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
        "Yes": "‡§π‡§æ‡§Å",
        "No": "‡§®‡§π‡•Ä‡§Ç",
        "OK": "‡§†‡•Ä‡§ï ‡§π‡•à",
        "Close": "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "Open": "‡§ñ‡•ã‡§≤‡•á‡§Ç",
        "New": "‡§®‡§Ø‡§æ",
        "Old": "‡§™‡•Å‡§∞‡§æ‡§®‡§æ",
        "Today": "‡§Ü‡§ú",
        "Yesterday": "‡§ï‡§≤",
        "Tomorrow": "‡§ï‡§≤",
        "Week": "‡§∏‡§™‡•ç‡§§‡§æ‡§π",
        "Month": "‡§Æ‡§π‡•Ä‡§®‡§æ",
        "Year": "‡§∏‡§æ‡§≤",
        "Loading...": "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
        "Please wait...": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...",
        "No data available": "‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç",
        "No results found": "‡§ï‡•ã‡§à ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ"
    }
    
    try:
        with open(hi_po_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        updated_count = 0
        for english, hindi in basic_translations.items():
            # Pattern to match msgid followed by empty msgstr
            pattern = rf'msgid "{re.escape(english)}"\nmsgstr ""'
            replacement = f'msgid "{english}"\nmsgstr "{hindi}"'
            
            if re.search(pattern, content):
                content = re.sub(pattern, replacement, content)
                updated_count += 1
        
        # Write back to file
        with open(hi_po_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Updated {updated_count} translations in Hindi file")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error updating Hindi translations: {e}")

def create_enhanced_language_switcher():
    """Create enhanced JavaScript for language switching."""
    print("\nüîß Creating enhanced language switcher...")
    
    js_code = '''
// Enhanced Language Switcher for Smart Agriculture App
document.addEventListener('DOMContentLoaded', function() {
    // Initialize language dropdown functionality
    window.toggleLanguageDropdown = function() {
        const authDropdown = document.getElementById('authLanguageDropdown');
        const guestDropdown = document.getElementById('guestLanguageDropdown');
        
        if (authDropdown) {
            authDropdown.classList.toggle('hidden');
        }
        if (guestDropdown) {
            guestDropdown.classList.toggle('hidden');
        }
    };
    
    // Close dropdowns when clicking outside
    document.addEventListener('click', function(event) {
        const isLanguageButton = event.target.closest('[onclick*="toggleLanguageDropdown"]');
        const isDropdown = event.target.closest('#authLanguageDropdown, #guestLanguageDropdown');
        
        if (!isLanguageButton && !isDropdown) {
            const authDropdown = document.getElementById('authLanguageDropdown');
            const guestDropdown = document.getElementById('guestLanguageDropdown');
            
            if (authDropdown) authDropdown.classList.add('hidden');
            if (guestDropdown) guestDropdown.classList.add('hidden');
        }
    });
    
    // Store user language preference
    function setLanguagePreference(lang) {
        localStorage.setItem('userLanguage', lang);
    }
    
    // Apply saved language preference on page load
    function applySavedLanguage() {
        const savedLang = localStorage.getItem('userLanguage');
        const currentLang = document.documentElement.lang || 'hi';
        
        if (savedLang && savedLang !== currentLang) {
            // Redirect to set language if different
            window.location.href = `/set-language/${savedLang}`;
        }
    }
    
    // Language switcher with smooth transition
    window.switchLanguage = function(language) {
        setLanguagePreference(language);
        
        // Add loading indicator
        const body = document.body;
        const loadingIndicator = document.createElement('div');
        loadingIndicator.innerHTML = `
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
                    <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                    <span>${language === 'hi' ? '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...' : 'Switching language...'}</span>
                </div>
            </div>
        `;
        body.appendChild(loadingIndicator);
        
        // Navigate to language switcher
        setTimeout(() => {
            window.location.href = `/set-language/${language}`;
        }, 500);
    };
    
    // Apply saved language on load
    applySavedLanguage();
});
'''
    
    js_file_path = "app/static/js/language-switcher.js"
    with open(js_file_path, 'w', encoding='utf-8') as f:
        f.write(js_code)
    
    print(f"‚úÖ Created enhanced language switcher: {js_file_path}")

def fix_base_template():
    """Fix the base template for better language switching."""
    print("\nüîß Enhancing base template for language switching...")
    
    # This will be implemented to update the base template
    # with proper language attributes and improved switcher
    print("‚úÖ Base template language enhancements ready")

def main():
    """Main function to fix the translation system."""
    print("üöÄ Starting Smart Agriculture Translation System Fix")
    print("=" * 60)
    
    # Step 1: Check and install dependencies
    check_babel_installation()
    
    # Step 2: Fix configuration files
    fix_babel_config()
    add_missing_config()
    
    # Step 3: Extract and update translations
    extract_and_update_translations()
    
    # Step 4: Fix empty translations
    fix_empty_translations()
    
    # Step 5: Compile translations
    compile_translations()
    
    # Step 6: Create enhanced language switcher
    create_enhanced_language_switcher()
    
    # Step 7: Final instructions
    print("\n" + "=" * 60)
    print("üéâ Translation System Fix Complete!")
    print("\nüìã Next Steps:")
    print("1. Restart your Flask application")
    print("2. Test language switching in the browser")
    print("3. Check both Hindi and English interfaces")
    print("4. Report any missing translations")
    
    print("\nüîß Manual Tasks (if needed):")
    print("1. Add LANGUAGES config to config.py if not auto-added")
    print("2. Include language-switcher.js in your base template")
    print("3. Test on different pages to ensure consistency")

if __name__ == "__main__":
    main()
