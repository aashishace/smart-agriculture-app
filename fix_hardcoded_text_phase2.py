#!/usr/bin/env python3
"""
Comprehensive hardcoded Hindi text fix - Phase 2
This script will fix remaining hardcoded text patterns missed in the first pass
"""

import os
import re
from pathlib import Path

# Define additional hardcoded text patterns and their replacements
ADDITIONAL_REPLACEMENTS = {
    # Page titles
    'рдирд┐рдпрдо рдФрд░ рд╢рд░реНрддреЗрдВ - рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рджреЗрдЦрднрд╛рд▓ рд╕рд╣рд╛рдпрдХ': '{{ _("Terms and Conditions") }} - {{ _("Smart Crop Care Assistant") }}',
    'рдкреНрд░рд╛рдЗрд╡реЗрд╕реА рдиреАрддрд┐ - рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рджреЗрдЦрднрд╛рд▓ рд╕рд╣рд╛рдпрдХ': '{{ _("Privacy Policy") }} - {{ _("Smart Crop Care Assistant") }}',
    
    # Terms page content
    'рдирд┐рдпрдо рдФрд░ рд╢рд░реНрддреЗрдВ': '{{ _("Terms and Conditions") }}',
    'рд╕реНрд╡реАрдХреГрддрд┐ рдХреА рд╢рд░реНрддреЗрдВ': '{{ _("Terms of Acceptance") }}',
    'рд╕реНрдорд╛рд░реНрдЯ рдлрд╕рд▓ рджреЗрдЦрднрд╛рд▓ рд╕рд╣рд╛рдпрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ, рдЖрдк рдЗрди рдирд┐рдпрдореЛрдВ рдФрд░ рд╢рд░реНрддреЛрдВ рд╕реЗ рд╕рд╣рдордд рд╣реЛрддреЗ рд╣реИрдВред': '{{ _("By using Smart Crop Care Assistant, you agree to these terms and conditions.") }}',
    'рдпрджрд┐ рдЖрдк рдЗрди рд╢рд░реНрддреЛрдВ рд╕реЗ рд╕рд╣рдордд рдирд╣реАрдВ рд╣реИрдВ, рддреЛ рдХреГрдкрдпрд╛ рдЗрд╕ рдРрдк рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред': '{{ _("If you do not agree to these terms, please do not use this app.") }}',
    'рд╕реЗрд╡рд╛ рдХрд╛ рд╡рд┐рд╡рд░рдг': '{{ _("Service Description") }}',
    'рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЬрд┐рдореНрдореЗрджрд╛рд░рд┐рдпрд╛рдВ': '{{ _("User Responsibilities") }}',
    'рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд░реВрдк рдореЗрдВ, рдЖрдк рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдХреЗ рд▓рд┐рдП рдЬрд┐рдореНрдореЗрджрд╛рд░ рд╣реИрдВ:': '{{ _("As a user, you are responsible for the following:") }}',
    'рд╕рдЯреАрдХ рдФрд░ рдЕрджреНрдпрддрди рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рдирд╛': '{{ _("Providing accurate and updated information") }}',
    'рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдмрдирд╛рдП рд░рдЦрдирд╛': '{{ _("Maintaining the security of your account") }}',
    'рдХрд╛рдиреВрдиреА рдФрд░ рдиреИрддрд┐рдХ рддрд░реАрдХреЗ рд╕реЗ рдРрдк рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛': '{{ _("Using the app in a legal and ethical manner") }}',
    'рдЕрдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рдЕрдзрд┐рдХрд╛рд░реЛрдВ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░рдирд╛': '{{ _("Respecting the rights of other users") }}',
    
    # Prohibited activities
    'рдРрдк рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдореЗрдВ рд╣рд╕реНрддрдХреНрд╖реЗрдк рдХрд░рдирд╛': '{{ _("Interfering with app security") }}',
    'рдЭреВрдареА рдпрд╛ рднреНрд░рд╛рдордХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рдирд╛': '{{ _("Providing false or misleading information") }}',
    'рдЕрдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдкрд░реЗрд╢рд╛рди рдХрд░рдирд╛': '{{ _("Harassing other users") }}',
    'рдмрд┐рдирд╛ рдЕрдиреБрдорддрд┐ рдХреЗ рдбреЗрдЯрд╛ рдХрд╛ рджреБрд░реБрдкрдпреЛрдЧ рдХрд░рдирд╛': '{{ _("Misusing data without permission") }}',
    
    # Service availability
    'рд╣рдо 24/7 рд╕реЗрд╡рд╛ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░рддреЗ рд╣реИрдВ, рд▓реЗрдХрд┐рди рддрдХрдиреАрдХреА рд░рдЦрд░рдЦрд╛рд╡ рдпрд╛ рдЕрдиреНрдп рдХрд╛рд░рдгреЛрдВ рд╕реЗ': '{{ _("We strive to provide 24/7 service, but due to technical maintenance or other reasons") }}',
    
    # GPS instructions
    'GPS рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ рдХреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ:': '{{ _("How to get GPS coordinates:") }}',
    'рд╕реНрдерд╛рди рдкрд░ рд▓рдВрдмрд╛ рджрдмрд╛рдПрдВ (Long press)': '{{ _("Long press on the location") }}',
    'рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ рджрд┐рдЦрд╛рдИ рджреЗрдВрдЧреЗ (рдЬреИрд╕реЗ: 26.8467, 80.9462)': '{{ _("Coordinates will appear (e.g.: 26.8467, 80.9462)") }}',
    'рдкрд╣рд▓рд╛ рдирдВрдмрд░ Latitude рд╣реИ, рджреВрд╕рд░рд╛ Longitude': '{{ _("First number is Latitude, second is Longitude") }}',
    
    # Location actions
    'рд╕реНрдерд╛рди рдХреА рдЬрд╛рдирдХрд╛рд░реА рд╣рдЯрд╛ рджреА рдЧрдИред': 'Location information cleared.',
    
    # Area display
    'рдПрдХрдбрд╝': 'acres',
}

def fix_template_file(file_path):
    """Fix hardcoded text in a single template file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        changes_made = 0
        
        # Apply replacements
        for hindi_text, replacement in ADDITIONAL_REPLACEMENTS.items():
            if hindi_text in content:
                content = content.replace(hindi_text, replacement)
                changes_made += 1
                print(f"  тЬУ Replaced: {hindi_text}")
        
        # Only write if changes were made
        if changes_made > 0:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ЁЯУЭ Updated {file_path} with {changes_made} changes")
            return True
        else:
            print(f"  тПня╕П No changes needed in {file_path}")
            return False
            
    except Exception as e:
        print(f"  тЭМ Error processing {file_path}: {e}")
        return False

def main():
    """Main function to process all template files"""
    print("ЁЯФз Starting Phase 2 hardcoded text fix...")
    
    # Find all HTML template files
    template_dir = Path("app/templates")
    if not template_dir.exists():
        print("тЭМ Templates directory not found!")
        return
    
    html_files = list(template_dir.rglob("*.html"))
    print(f"ЁЯУБ Found {len(html_files)} HTML template files")
    
    total_fixed = 0
    
    for file_path in html_files:
        print(f"\nЁЯФН Processing: {file_path}")
        if fix_template_file(file_path):
            total_fixed += 1
    
    print(f"\nтЬЕ Phase 2 Completed! Fixed {total_fixed} out of {len(html_files)} files")
    print("\nЁЯУЛ Next steps:")
    print("1. Run: python compile_translations.py")
    print("2. Add new translation entries to messages.po")
    print("3. Test the application in both languages")

if __name__ == "__main__":
    main()
