#!/usr/bin/env python3
"""
Manual Translation Compiler and Fixer
"""

import os
import re
import json
from babel.messages.pofile import read_po, write_po
from babel.messages.mofile import write_mo
from babel.messages.catalog import Catalog

def fix_hindi_translations():
    """Add missing Hindi translations to the PO file."""
    
    # Critical translations that need to be filled
    translations = {
        "Dashboard": "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "Farms": "‡§ñ‡•á‡§§", 
        "Crops": "‡§´‡§∏‡§≤‡•á‡§Ç",
        "Disease Scanner": "‡§∞‡•ã‡§ó ‡§∏‡•ç‡§ï‡•à‡§®‡§∞",
        "Profile": "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
        "Help": "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ",
        "Logout": "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü",
        "Login": "‡§≤‡•â‡§ó‡§ø‡§®",
        "Register": "‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£",
        "Home": "‡§π‡•ã‡§Æ",
        "Weather": "‡§Æ‡•å‡§∏‡§Æ",
        "Clear": "‡§∏‡§æ‡§´",
        "Smart Crop Care Assistant": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§ï",
        "Getting Started": "‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "Add your farm first to get smart crop care recommendations": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡§æ ‡§ñ‡•á‡§§ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        "Start Setup": "‡§∏‡•á‡§ü‡§Ö‡§™ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "Total Farms": "‡§ï‡•Å‡§≤ ‡§ñ‡•á‡§§",
        "Active Crops": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç", 
        "Weather Alerts": "‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§≤‡§∞‡•ç‡§ü",
        "No tasks for today!": "‡§Ü‡§ú ‡§ï‡•ã‡§à ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!",
        "Quick Actions": "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø",
        "Add Farm": "‡§ñ‡•á‡§§ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        "Add Crop": "‡§´‡§∏‡§≤ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç", 
        "Scan Disease": "‡§∞‡•ã‡§ó ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç",
        "View Crops": "‡§´‡§∏‡§≤‡•á‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç",
        "Help & Support": "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®",
        "Schedule Irrigation": "‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç",
        "Weather Information": "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
        "Humidity": "‡§®‡§Æ‡•Ä",
        "Wind Speed": "‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§ó‡§§‡§ø",
        "Rain Forecast": "‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ",
        "Contact": "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï",
        "About": "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
        "Settings": "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
        "Save": "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç",
        "Cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "Submit": "‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "Back": "‡§µ‡§æ‡§™‡§∏",
        "Next": "‡§Ö‡§ó‡§≤‡§æ",
        "Previous": "‡§™‡§ø‡§õ‡§≤‡§æ",
        "Edit": "‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
        "Delete": "‡§π‡§ü‡§æ‡§è‡§Ç",
        "Add": "‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
        "Remove": "‡§π‡§ü‡§æ‡§è‡§Ç",
        "Update": "‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
        "Create": "‡§¨‡§®‡§æ‡§è‡§Ç",
        "Search": "‡§ñ‡•ã‡§ú",
        "Filter": "‡§´‡§ø‡§≤‡•ç‡§ü‡§∞",
        "Sort": "‡§ï‡•ç‡§∞‡§Æ‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡•á‡§Ç",
        "English": "‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä",
        "Hindi": "‡§π‡§ø‡§Ç‡§¶‡•Ä",
        "Language": "‡§≠‡§æ‡§∑‡§æ",
        "Select Language": "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
        "Farm Name": "‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§®‡§æ‡§Æ",
        "Crop Type": "‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
        "Area": "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤",
        "Location": "‡§∏‡•ç‡§•‡§æ‡§®",
        "Date": "‡§§‡§æ‡§∞‡•Ä‡§ñ",
        "Time": "‡§∏‡§Æ‡§Ø",
        "Status": "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
        "Active": "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø",
        "Inactive": "‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø",
        "Completed": "‡§™‡•Ç‡§∞‡•ç‡§£",
        "Pending": "‡§¨‡§ï‡§æ‡§Ø‡§æ",
        "Success": "‡§∏‡§´‡§≤‡§§‡§æ",
        "Error": "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        "Warning": "‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä",
        "Information": "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
        "Yes": "‡§π‡§æ‡§Å",
        "No": "‡§®‡§π‡•Ä‡§Ç",
        "OK": "‡§†‡•Ä‡§ï ‡§π‡•à",
        "Close": "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
        "Open": "‡§ñ‡•ã‡§≤‡•á‡§Ç",
        "New": "‡§®‡§Ø‡§æ",
        "Today": "‡§Ü‡§ú",
        "Yesterday": "‡§ï‡§≤",
        "Tomorrow": "‡§ï‡§≤",
        "Week": "‡§∏‡§™‡•ç‡§§‡§æ‡§π",
        "Month": "‡§Æ‡§π‡•Ä‡§®‡§æ",
        "Year": "‡§∏‡§æ‡§≤",
        "Loading...": "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
        "Please wait...": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...",
        "No data available": "‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç",
        "No results found": "‡§ï‡•ã‡§à ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ",
        "State": "‡§∞‡§æ‡§ú‡•ç‡§Ø",
        "Select State": "‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç",
        "Uttar Pradesh": "‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
        "Bihar": "‡§¨‡§ø‡§π‡§æ‡§∞",
        "Madhya Pradesh": "‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
        "Rajasthan": "‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®",
        "Punjab": "‡§™‡§Ç‡§ú‡§æ‡§¨",
        "Haryana": "‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ",
        "Maharashtra": "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
        "Karnataka": "‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï",
        "Tamil Nadu": "‡§§‡§Æ‡§ø‡§≤ ‡§®‡§æ‡§°‡•Å",
        "Andhra Pradesh": "‡§Ü‡§Ç‡§ß‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
        "West Bengal": "‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤",
        "Gujarat": "‡§ó‡•Å‡§ú‡§∞‡§æ‡§§",
        "Odisha": "‡§ì‡§°‡§ø‡§∂‡§æ",
        "Telangana": "‡§§‡•á‡§≤‡§Ç‡§ó‡§æ‡§®‡§æ",
        "Kerala": "‡§ï‡•á‡§∞‡§≤",
        "Jharkhand": "‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§°",
        "Assam": "‡§Ö‡§∏‡§Æ",
        "Chhattisgarh": "‡§õ‡§§‡•ç‡§§‡•Ä‡§∏‡§ó‡§¢‡§º",
        "Uttarakhand": "‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ñ‡§Ç‡§°",
        "Himachal Pradesh": "‡§π‡§ø‡§Æ‡§æ‡§ö‡§≤ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
        "Jammu Kashmir": "‡§ú‡§Æ‡•ç‡§Æ‡•Ç ‡§ï‡§∂‡•ç‡§Æ‡•Ä‡§∞",
        "Other": "‡§Ö‡§®‡•ç‡§Ø",
        "Full Name": "‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ",
        "Your full name": "‡§Ü‡§™‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ",
        "Mobile Number": "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞",
        "10 digit Indian mobile number": "10 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞",
        "Village/City": "‡§ó‡§æ‡§Å‡§µ/‡§∂‡§π‡§∞",
        "Your village or city": "‡§Ü‡§™‡§ï‡§æ ‡§ó‡§æ‡§Å‡§µ ‡§Ø‡§æ ‡§∂‡§π‡§∞",
        "Password": "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
        "Your password": "‡§Ü‡§™‡§ï‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
        "At least 6 characters": "‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 6 ‡§Ö‡§ï‡•ç‡§∑‡§∞",
        "Confirm Password": "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
        "Re-enter password": "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
        "By registering you agree to our": "‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§ï‡•á ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∂‡§∞‡•ç‡§§‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•à‡§Ç",
        "Terms": "‡§®‡§ø‡§Ø‡§Æ",
        "and": "‡§î‡§∞",
        "Privacy Policy": "‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø",
        "Already have an account?": "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à?",
        "New user?": "‡§®‡§è ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ?",
        "Remember me": "‡§Æ‡•Å‡§ù‡•á ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç",
        "Forgot password?": "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§≠‡•Ç‡§≤ ‡§ó‡§è?",
        "Or": "‡§Ø‡§æ",
        "create a new account": "‡§®‡§Ø‡§æ ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç",
        "Welcome": "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à",
        "Smart Agriculture Dashboard": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        "Today's Date": "‡§Ü‡§ú ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ",
        "Making agriculture easier for Indian farmers with smart technology.": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§∑‡§ø ‡§ï‡•ã ‡§Ü‡§∏‡§æ‡§® ‡§¨‡§®‡§æ‡§®‡§æ‡•§",
        "Services": "‡§∏‡•á‡§µ‡§æ‡§è‡§Ç",
        "Smart Irrigation": "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à",
        "Disease Detection": "‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®",
        "Crop Management": "‡§´‡§∏‡§≤ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®",
        "acres": "‡§è‡§ï‡§°‡§º",
        "Farm Location": "‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§®",
        "Planting Date": "‡§∞‡•ã‡§™‡§£ ‡§§‡§æ‡§∞‡•Ä‡§ñ",
        "Soil Type": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
        "Clay Soil": "‡§ö‡§ø‡§ï‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä",
        "Sandy Soil": "‡§¨‡§≤‡•Å‡§à ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä",
        "Loam Soil": "‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä",
        "Black Soil": "‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä",
        "Red Soil": "‡§≤‡§æ‡§≤ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä"
    }
    
    hi_po_path = "app/translations/hi/LC_MESSAGES/messages.po"
    
    try:
        # Read current content
        with open(hi_po_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        updated_count = 0
        
        # Update each translation
        for english, hindi in translations.items():
            # Pattern to match msgid followed by empty msgstr
            pattern = rf'msgid "{re.escape(english)}"\nmsgstr ""'
            replacement = f'msgid "{english}"\nmsgstr "{hindi}"'
            
            # Check if this translation exists and is empty
            if re.search(pattern, content):
                content = re.sub(pattern, replacement, content)
                updated_count += 1
                print(f"Updated: {english} -> {hindi}")
        
        # Write back to file
        with open(hi_po_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"\n‚úÖ Updated {updated_count} Hindi translations")
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating Hindi translations: {e}")
        return False

def compile_translations():
    """Compile .po files to .mo files."""
    print("\nüîß Compiling translation files...")
    
    translations_compiled = 0
    
    # Compile Hindi translations
    hi_po_path = "app/translations/hi/LC_MESSAGES/messages.po"
    hi_mo_path = "app/translations/hi/LC_MESSAGES/messages.mo"
    
    if os.path.exists(hi_po_path):
        try:
            with open(hi_po_path, 'rb') as f:
                catalog = read_po(f)
            
            with open(hi_mo_path, 'wb') as f:
                write_mo(f, catalog)
            
            print(f"‚úÖ Compiled Hindi translations: {hi_mo_path}")
            translations_compiled += 1
            
        except Exception as e:
            print(f"‚ùå Error compiling Hindi: {e}")
    else:
        print(f"‚ùå Hindi PO file not found: {hi_po_path}")
    
    # Compile English translations
    en_po_path = "app/translations/en/LC_MESSAGES/messages.po"
    en_mo_path = "app/translations/en/LC_MESSAGES/messages.mo"
    
    if os.path.exists(en_po_path):
        try:
            with open(en_po_path, 'rb') as f:
                catalog = read_po(f)
            
            with open(en_mo_path, 'wb') as f:
                write_mo(f, catalog)
            
            print(f"‚úÖ Compiled English translations: {en_mo_path}")
            translations_compiled += 1
            
        except Exception as e:
            print(f"‚ùå Error compiling English: {e}")
    else:
        print(f"‚ùå English PO file not found: {en_po_path}")
    
    return translations_compiled > 0

def create_test_translation_app():
    """Create a test script to verify translations work."""
    test_script = '''#!/usr/bin/env python3
"""
Test script to verify translation system
"""

import os
import sys
sys.path.append('.')

def test_translations():
    from app import create_app
    from flask_babel import get_locale, gettext as _
    
    app = create_app()
    
    print("üß™ Testing Translation System")
    print("=" * 40)
    
    # Test Hindi context
    with app.test_request_context('/?lang=hi'):
        print(f"Hindi context - Locale: {get_locale()}")
        print(f"Dashboard: {_('Dashboard')}")
        print(f"Crops: {_('Crops')}")
        print(f"Weather: {_('Weather')}")
        print(f"Help: {_('Help')}")
    
    print()
    
    # Test English context  
    with app.test_request_context('/?lang=en'):
        print(f"English context - Locale: {get_locale()}")
        print(f"Dashboard: {_('Dashboard')}")
        print(f"Crops: {_('Crops')}")
        print(f"Weather: {_('Weather')}")
        print(f"Help: {_('Help')}")
    
    print("\\n‚úÖ Translation test complete!")

if __name__ == "__main__":
    test_translations()
'''
    
    with open("test_translations.py", 'w', encoding='utf-8') as f:
        f.write(test_script)
    
    print("‚úÖ Created translation test script: test_translations.py")

def update_config_if_needed():
    """Update config.py with translation settings if needed."""
    print("\nüîß Checking config.py...")
    
    try:
        with open('config.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'LANGUAGES' not in content:
            print("‚ö†Ô∏è LANGUAGES config not found in config.py")
            print("Please add this to your config.py in the appropriate config class:")
            print("""
    # Translation Configuration
    LANGUAGES = {
        'en': 'English',
        'hi': '‡§π‡§ø‡§Ç‡§¶‡•Ä'
    }
    BABEL_DEFAULT_LOCALE = 'hi'
    BABEL_DEFAULT_TIMEZONE = 'Asia/Kolkata'
""")
        else:
            print("‚úÖ Translation config found in config.py")
            
    except Exception as e:
        print(f"‚ùå Error checking config.py: {e}")

def main():
    """Main function to fix translations comprehensively."""
    print("üöÄ Smart Agriculture Translation Fix")
    print("=" * 50)
    
    # Step 1: Fix Hindi translations
    print("\nüìù Step 1: Fixing Hindi translations...")
    if fix_hindi_translations():
        print("‚úÖ Hindi translations updated successfully")
    else:
        print("‚ùå Failed to update Hindi translations")
    
    # Step 2: Compile translations
    print("\nüîß Step 2: Compiling translations...")
    if compile_translations():
        print("‚úÖ Translations compiled successfully")
    else:
        print("‚ùå Failed to compile translations")
    
    # Step 3: Check config
    update_config_if_needed()
    
    # Step 4: Create test script
    print("\nüß™ Step 4: Creating test script...")
    create_test_translation_app()
    
    # Final instructions
    print("\n" + "=" * 50)
    print("üéâ Translation Fix Complete!")
    print("\nüìã Next Steps:")
    print("1. Run: python test_translations.py")
    print("2. Restart your Flask application")
    print("3. Test language switching in browser")
    print("4. Check both Hindi and English pages")
    
    # Check if MO files were created
    hi_mo = "app/translations/hi/LC_MESSAGES/messages.mo"
    en_mo = "app/translations/en/LC_MESSAGES/messages.mo"
    
    print("\nüìÅ Translation Files Status:")
    print(f"Hindi .mo file: {'‚úÖ' if os.path.exists(hi_mo) else '‚ùå'} {hi_mo}")
    print(f"English .mo file: {'‚úÖ' if os.path.exists(en_mo) else '‚ùå'} {en_mo}")

if __name__ == "__main__":
    main()
