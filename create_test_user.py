#!/usr/bin/env python3
"""
Create Comprehensive Demo Farmer Account - Sakshi's MCA Project
This script creates a realistic farmer account with complete farming data
for Smart Crop Care Assistant demonstration.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models.user import User
from app.models.farm import Farm
from app.models.crop import Crop, Activity, DiseaseDetection
from datetime import datetime, timedelta, date
import random

def create_comprehensive_demo_farmer():
    """Create a comprehensive demo farmer account for Sakshi's MCA presentation."""
    app = create_app('development')
    
    with app.app_context():
        # Check if demo farmer already exists
        existing_user = User.query.filter_by(phone='8765432109').first()
        if existing_user:
            print("üåæ Demo farmer already exists! Refreshing with latest data...")
            # Delete existing data to recreate with fresh comprehensive data
            for farm in existing_user.farms:
                db.session.delete(farm)
            db.session.commit()
            user = existing_user
        else:
            # Create comprehensive demo farmer account
            user = User(
                name='‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•Å‡§Æ‡§æ‡§∞ ‡§∂‡§∞‡•ç‡§Æ‡§æ',  # Vikas Kumar Sharma - Professional farmer name
                phone='8765432109',  # Changed phone number
                email='vikas.farmer@gmail.com',  # Professional email
                village='‡§∂‡•ç‡§∞‡•Ä‡§®‡§ó‡§∞',  # Shrinagar village
                state='‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂',  # Uttar Pradesh
                preferred_language='hi'  # Hindi preference
            )
            user.set_password('demo2024')  # Updated password
            
            db.session.add(user)
            db.session.commit()
            print(f"‚úÖ Created comprehensive demo farmer: {user.name}")
        
        # Create 4 diverse farms with realistic Indian farming scenarios
        farms_data = [
            {
                'farm_name': '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§≠‡•Ç‡§Æ‡§ø',  # Main Agricultural Land
                'area_acres': 12.5,  # Larger main farm
                'soil_type': '‡§â‡§™‡§ú‡§æ‡§ä ‡§¶‡•ã‡§Æ‡§ü',  # Fertile loam
                'latitude': 26.8467,  # Lucknow region coordinates
                'longitude': 80.9462
            },
            {
                'farm_name': '‡§ó‡§Ç‡§ó‡§æ ‡§§‡§ü‡•Ä‡§Ø ‡§ñ‡•á‡§§',  # Ganges Riverside Farm
                'area_acres': 8.3,
                'soil_type': '‡§ú‡§≤‡•ã‡§¢‡§º ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä',  # Alluvial soil
                'latitude': 26.8500,
                'longitude': 80.9500
            },
            {
                'farm_name': '‡§™‡§∞‡•ç‡§µ‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞',  # Mountain Agricultural Area
                'area_acres': 5.7,
                'soil_type': '‡§≤‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä',  # Red clay soil
                'latitude': 26.8400,
                'longitude': 80.9400
            },
            {
                'farm_name': '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞',  # Organic Farming Center
                'area_acres': 6.2,
                'soil_type': '‡§ï‡§æ‡§≤‡•Ä ‡§â‡§∞‡•ç‡§µ‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä',  # Black fertile soil
                'latitude': 26.8350,
                'longitude': 80.9450
            }
        ]
        
        farms = []
        for farm_data in farms_data:
            farm = Farm(
                user_id=user.id,
                **farm_data
            )
            db.session.add(farm)
            farms.append(farm)
        
        db.session.commit()
        
        # Create diverse crops across farms with realistic Indian farming seasons
        crops_data = [
            # Farm 1 - Main Agricultural Land (‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§≠‡•Ç‡§Æ‡§ø)
            {
                'farm': farms[0],
                'crop_type': '‡§ó‡•á‡§π‡•Ç‡§Ç',  # Wheat
                'variety': 'HD-3086 (‡§∏‡§ï‡§∂‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ)',  # Including Sakshi variety reference
                'planting_date': date(2024, 11, 20),
                'expected_harvest_date': date(2025, 4, 20),
                'area_acres': 4.5,
                'current_stage': 'tillering',  # Active growth
                'status': 'active'
            },
            {
                'farm': farms[0],
                'crop_type': '‡§∏‡§∞‡§∏‡•ã‡§Ç',  # Mustard
                'variety': '‡§™‡•Ç‡§∏‡§æ ‡§Æ‡§∏‡•ç‡§ü‡§∞‡•ç‡§°-27',
                'planting_date': date(2024, 10, 25),
                'expected_harvest_date': date(2025, 3, 25),
                'area_acres': 3.2,
                'current_stage': 'flowering',
                'status': 'active'
            },
            {
                'farm': farms[0],
                'crop_type': '‡§Ü‡§≤‡•Ç',  # Potato
                'variety': '‡§ï‡•Å‡§´‡§∞‡•Ä ‡§∏‡§ø‡§Ç‡§¶‡•Ç‡§∞‡•Ä',
                'planting_date': date(2024, 12, 5),
                'expected_harvest_date': date(2025, 3, 20),
                'area_acres': 2.8,
                'current_stage': 'tuber_formation',
                'status': 'active'
            },
            {
                'farm': farms[0],
                'crop_type': '‡§ö‡§®‡§æ',  # Chickpea
                'variety': '‡§™‡•Ç‡§∏‡§æ ‡§ö‡§®‡§æ-256',
                'planting_date': date(2024, 11, 1),
                'expected_harvest_date': date(2025, 4, 1),
                'area_acres': 2.0,
                'current_stage': 'pod_development',
                'status': 'active'
            },
            
            # Farm 2 - Ganges Riverside Farm (‡§ó‡§Ç‡§ó‡§æ ‡§§‡§ü‡•Ä‡§Ø ‡§ñ‡•á‡§§)
            {
                'farm': farms[1],
                'crop_type': '‡§ö‡§æ‡§µ‡§≤',  # Rice
                'variety': '‡§™‡•Ç‡§∏‡§æ ‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä-1',
                'planting_date': date(2024, 6, 20),
                'expected_harvest_date': date(2024, 11, 20),
                'area_acres': 5.0,
                'current_stage': 'harvested',
                'status': 'harvested'
            },
            {
                'farm': farms[1],
                'crop_type': '‡§Æ‡§ï‡•ç‡§ï‡§æ',  # Corn
                'variety': '‡§ó‡§Ç‡§ó‡§æ-5 ‡§π‡§æ‡§á‡§¨‡•ç‡§∞‡§ø‡§°',
                'planting_date': date(2024, 7, 5),
                'expected_harvest_date': date(2024, 11, 5),
                'area_acres': 3.3,
                'current_stage': 'harvested',
                'status': 'harvested'
            },
            
            # Farm 3 - Mountain Agricultural Area (‡§™‡§∞‡•ç‡§µ‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞)
            {
                'farm': farms[2],
                'crop_type': '‡§ó‡§®‡•ç‡§®‡§æ',  # Sugarcane
                'variety': '‡§ï‡•ã-0238 ‡§â‡§®‡•ç‡§®‡§§',
                'planting_date': date(2024, 3, 15),
                'expected_harvest_date': date(2025, 2, 15),
                'area_acres': 3.5,
                'current_stage': 'maturation',
                'status': 'active'
            },
            {
                'farm': farms[2],
                'crop_type': '‡§Ö‡§∞‡§π‡§∞',  # Pigeon Pea
                'variety': 'ICPL-87119',
                'planting_date': date(2024, 6, 25),
                'expected_harvest_date': date(2025, 1, 25),
                'area_acres': 2.2,
                'current_stage': 'pod_filling',
                'status': 'active'
            },
            
            # Farm 4 - Organic Farming Center (‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞)
            {
                'farm': farms[3],
                'crop_type': '‡§π‡§≤‡•ç‡§¶‡•Ä',  # Turmeric
                'variety': '‡§∏‡•Å‡§¶‡§∞‡•ç‡§∂‡§® ‡§π‡§≤‡•ç‡§¶‡•Ä',
                'planting_date': date(2024, 5, 10),
                'expected_harvest_date': date(2025, 2, 10),
                'area_acres': 2.0,
                'current_stage': 'rhizome_development',
                'status': 'active'
            },
            {
                'farm': farms[3],
                'crop_type': '‡§ß‡§®‡§ø‡§Ø‡§æ',  # Coriander
                'variety': '‡§™‡§Ç‡§§ ‡§π‡§∞‡§ø‡§§‡§Æ‡§æ',
                'planting_date': date(2024, 11, 10),
                'expected_harvest_date': date(2025, 2, 20),
                'area_acres': 1.8,
                'current_stage': 'vegetative_growth',
                'status': 'active'
            },
            {
                'farm': farms[3],
                'crop_type': '‡§≤‡§π‡§∏‡•Å‡§®',  # Garlic
                'variety': '‡§ó‡•ã‡§¶‡§æ‡§µ‡§∞‡•Ä ‡§ó‡§æ‡§∞‡•ç‡§≤‡§ø‡§ï',
                'planting_date': date(2024, 10, 15),
                'expected_harvest_date': date(2025, 4, 15),
                'area_acres': 1.4,
                'current_stage': 'bulb_formation',
                'status': 'active'
            },
            {
                'farm': farms[3],
                'crop_type': '‡§™‡•ç‡§Ø‡§æ‡§ú',  # Onion
                'variety': '‡§™‡•Ç‡§∏‡§æ ‡§∞‡•á‡§°',
                'planting_date': date(2024, 12, 1),
                'expected_harvest_date': date(2025, 4, 30),
                'area_acres': 1.0,
                'current_stage': 'bulb_initiation',
                'status': 'active'
            }
        ]
        
        crops = []
        for crop_data in crops_data:
            farm = crop_data.pop('farm')
            crop = Crop(
                farm_id=farm.id,
                **crop_data
            )
            db.session.add(crop)
            crops.append(crop)
        
        db.session.commit()
        
        # Create comprehensive activities for all crops
        print("Creating realistic farming activities...")
        
        # Enhanced activity types in Hindi
        activity_types = [
            '‡§¨‡•Ä‡§ú ‡§¨‡•Å‡§µ‡§æ‡§à', '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®', '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶', '‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï', 
            '‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ', '‡§®‡§ø‡§∞‡§æ‡§à-‡§ó‡•Å‡§°‡§º‡§æ‡§à', '‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®', '‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à',
            '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£', '‡§¨‡•Ä‡§ú ‡§â‡§™‡§ö‡§æ‡§∞', '‡§ñ‡§∞‡§™‡§§‡§µ‡§æ‡§∞ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£', '‡§™‡§æ‡§®‡•Ä ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®'
        ]
        
        # Generate activities for each crop
        for crop in crops:
            # Calculate number of days since planting
            days_since_planting = (date.today() - crop.planting_date).days
            
            # Create activities based on crop stage and time
            activities = []
            
            # Planting activity
            activities.append({
                'activity_type': '‡§¨‡•Ä‡§ú ‡§¨‡•Å‡§µ‡§æ‡§à',
                'description': f'{crop.crop_type} ‡§ï‡•Ä ‡§â‡§®‡•ç‡§®‡§§ ‡§¨‡•Å‡§µ‡§æ‡§à - {crop.variety}',
                'scheduled_date': crop.planting_date,
                'status': 'completed',
                'quantity': '30 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§è‡§ï‡§°‡§º',
                'notes': '‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡•á ‡§¨‡•Ä‡§ú ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó'
            })
            
            # Regular irrigation (every 15-20 days)
            irrigation_dates = []
            current_date = crop.planting_date + timedelta(days=10)
            while current_date < date.today() and current_date < crop.expected_harvest_date:
                irrigation_dates.append(current_date)
                current_date += timedelta(days=random.randint(15, 20))
            
            for i, irr_date in enumerate(irrigation_dates):
                activities.append({
                    'activity_type': '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®',
                    'description': f'‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à #{i+1} - ‡§™‡§æ‡§®‡•Ä ‡§¨‡§ö‡§§ ‡§§‡§ï‡§®‡•Ä‡§ï',
                    'scheduled_date': irr_date,
                    'status': 'completed' if irr_date <= date.today() else 'pending',
                    'quantity': f'{random.randint(3, 5)} ‡§ò‡§Ç‡§ü‡•á',
                    'notes': f'‡§°‡•ç‡§∞‡§ø‡§™ ‡§á‡§∞‡§ø‡§ó‡•á‡§∂‡§® / ‡§∏‡•ç‡§™‡•ç‡§∞‡§ø‡§Ç‡§ï‡§≤‡§∞ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ'
                })
            
            # Enhanced fertilizer applications
            if days_since_planting > 30:
                activities.append({
                    'activity_type': '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶',
                    'description': '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§Æ‡•Ä ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü',
                    'scheduled_date': crop.planting_date + timedelta(days=20),
                    'status': 'completed',
                    'quantity': '‡§µ‡§∞‡•ç‡§Æ‡•Ä ‡§ï‡§Ç‡§™‡•ã‡§∏‡•ç‡§ü: 100 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§è‡§ï‡§°‡§º',
                    'notes': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§â‡§∞‡•ç‡§µ‡§∞‡§§‡§æ ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§π‡•á‡§§‡•Å'
                })
                
                activities.append({
                    'activity_type': '‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï',
                    'description': '‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ NPK ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï',
                    'scheduled_date': crop.planting_date + timedelta(days=30),
                    'status': 'completed',
                    'quantity': '‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ: 60 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ, DAP: 40 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ',
                    'notes': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞'
                })
            
            # Enhanced pesticide and disease management
            if days_since_planting > 45:
                activities.append({
                    'activity_type': '‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ',
                    'description': '‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®',
                    'scheduled_date': crop.planting_date + timedelta(days=45),
                    'status': 'completed',
                    'quantity': '‡§¨‡§æ‡§Ø‡•ã ‡§™‡•á‡§∏‡•ç‡§ü‡§ø‡§∏‡§æ‡§á‡§°: 750ml/‡§è‡§ï‡§°‡§º',
                    'notes': '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó'
                })
            
            # Enhanced weeding
            if days_since_planting > 25:
                activities.append({
                    'activity_type': '‡§®‡§ø‡§∞‡§æ‡§à-‡§ó‡•Å‡§°‡§º‡§æ‡§à',
                    'description': '‡§Ø‡§æ‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï ‡§ñ‡§∞‡§™‡§§‡§µ‡§æ‡§∞ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£',
                    'scheduled_date': crop.planting_date + timedelta(days=25),
                    'status': 'completed',
                    'quantity': '‡§™‡§æ‡§µ‡§∞ ‡§µ‡•Ä‡§°‡§∞ - 2 ‡§ò‡§Ç‡§ü‡•á/‡§è‡§ï‡§°‡§º',
                    'notes': '‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§ï‡•É‡§∑‡§ø ‡§Ø‡§Ç‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó'
                })
            
            # Enhanced today's activities for Smart Irrigation Dashboard
            today_activities = [
                {
                    'activity_type': '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®',
                    'description': f'{crop.crop_type} ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï',
                    'scheduled_date': date.today(),
                    'status': 'pending',
                    'quantity': '4 ‡§ò‡§Ç‡§ü‡•á - ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ',
                    'notes': '‡§Æ‡•å‡§∏‡§Æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§æ'
                },
                {
                    'activity_type': '‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï',
                    'description': f'{crop.crop_type} ‡§Æ‡•á‡§Ç ‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ ‡§∏‡§≤‡•ç‡§´‡•á‡§ü',
                    'scheduled_date': date.today(),
                    'status': 'pending',
                    'quantity': '35 ‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ/‡§è‡§ï‡§°‡§º',
                    'notes': '‡§´‡•Ç‡§≤ ‡§î‡§∞ ‡§´‡§≤ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§π‡•á‡§§‡•Å'
                },
                {
                    'activity_type': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£',
                    'description': f'{crop.crop_type} ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç pH ‡§ú‡§æ‡§Ç‡§ö',
                    'scheduled_date': date.today(),
                    'status': 'pending',
                    'quantity': '5 ‡§®‡§Æ‡•Ç‡§®‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§è‡§ï‡§°‡§º',
                    'notes': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞‡§ø‡§Ç‡§ó'
                }
            ]
            
            # Add today's activities to active crops randomly
            if crop.status == 'active' and random.choice([True, False]):
                activities.extend(today_activities[:random.randint(1, 2)])  # Add 1-2 today activities
            
            # Create activity records
            for activity_data in activities:
                activity = Activity(
                    crop_id=crop.id,
                    **activity_data
                )
                db.session.add(activity)
        
        # Enhanced disease detection records with more comprehensive data
        print("Adding comprehensive disease detection records...")
        
        disease_data = [
            {
                'crop': crops[0],  # Wheat
                'image_path': '/uploads/diseases/wheat_leaf_rust_2024.jpg',
                'predicted_disease': '‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡§æ ‡§™‡§§‡•ç‡§§‡•Ä ‡§∞‡§§‡•Å‡§Ü ‡§∞‡•ã‡§ó',
                'confidence_score': 0.892,
                'treatment_suggested': '‡§™‡•ç‡§∞‡•ã‡§™‡§ø‡§ï‡•ã‡§®‡§æ‡§ú‡§º‡•ã‡§≤ 25% EC @ 500ml/‡§è‡§ï‡§°‡§º ‡§ï‡§æ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç‡•§ 15 ‡§¶‡§ø‡§® ‡§¨‡§æ‡§¶ ‡§¶‡•ã‡§π‡§∞‡§æ‡§µ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡•§',
                'is_healthy': False,
                'detected_at': datetime.now() - timedelta(days=3)
            },
            {
                'crop': crops[2],  # Potato  
                'image_path': '/uploads/diseases/potato_late_blight_2024.jpg',
                'predicted_disease': '‡§Ü‡§≤‡•Ç ‡§ï‡§æ ‡§™‡§ø‡§õ‡•á‡§§‡§æ ‡§ù‡•Å‡§≤‡§∏‡§æ ‡§∞‡•ã‡§ó',
                'confidence_score': 0.945,
                'treatment_suggested': '‡§Æ‡•à‡§Ç‡§ï‡•ã‡§ú‡•á‡§¨ 75% WP @ 2.5kg/‡§è‡§ï‡§°‡§º ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ‡•§ ‡§®‡§Æ‡•Ä ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡•§',
                'is_healthy': False,
                'detected_at': datetime.now() - timedelta(days=1)
            },
            {
                'crop': crops[6],  # Sugarcane
                'image_path': '/uploads/diseases/sugarcane_healthy_2024.jpg',
                'predicted_disease': '‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ó‡§®‡•ç‡§®‡§æ ‡§™‡•å‡§ß‡§æ',
                'confidence_score': 0.823,
                'treatment_suggested': '‡§´‡§∏‡§≤ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§π‡•à‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§™‡•ã‡§∑‡§£ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§',
                'is_healthy': True,
                'detected_at': datetime.now() - timedelta(days=7)
            },
            {
                'crop': crops[8],  # Turmeric
                'image_path': '/uploads/diseases/turmeric_leaf_spot_2024.jpg',
                'predicted_disease': '‡§π‡§≤‡•ç‡§¶‡•Ä ‡§ï‡§æ ‡§™‡§§‡•ç‡§§‡•Ä ‡§ß‡§¨‡•ç‡§¨‡§æ ‡§∞‡•ã‡§ó',
                'confidence_score': 0.767,
                'treatment_suggested': '‡§ï‡•â‡§™‡§∞ ‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§á‡§° 50% WP @ 3gm/liter ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ‡•§',
                'is_healthy': False,
                'detected_at': datetime.now() - timedelta(days=12)
            },
            {
                'crop': crops[4],  # Rice (Harvested)
                'image_path': '/uploads/diseases/rice_blast_2024.jpg',
                'predicted_disease': '‡§ß‡§æ‡§® ‡§ï‡§æ ‡§¨‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü ‡§∞‡•ã‡§ó',
                'confidence_score': 0.856,
                'treatment_suggested': '‡§ü‡•ç‡§∞‡§æ‡§á‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§æ‡§ú‡§º‡•ã‡§≤ 75% WP @ 600gm/‡§è‡§ï‡§°‡§º ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§',
                'is_healthy': False,
                'detected_at': datetime.now() - timedelta(days=45)
            }
        ]
        
        for disease_info in disease_data:
            crop = disease_info.pop('crop')
            disease = DiseaseDetection(
                crop_id=crop.id,
                **disease_info
            )
            db.session.add(disease)
        
        db.session.commit()
        
        print(f"\nüéâ Comprehensive test data created successfully!")
        print(f"üë§ User: ‡§∞‡§æ‡§Æ ‡§ï‡§ø‡§∏‡§æ‡§® (9876543210 / password123)")
        print(f"üè† Farms: {len(farms)} farms with diverse soil types")
        print(f"üåæ Crops: {len(crops)} crops (active: {len([c for c in crops if c.status == 'active'])})")
        print(f"üìã Activities: Multiple activities with today's pending tasks")
        print(f"üî¨ Disease Records: {len(disease_data)} disease detection records")
        print(f"\nüìä Dashboard Features to Explore:")
        print(f"   - Crop distribution charts")
        print(f"   - Monthly activity trends") 
        print(f"   - Weather integration")
        print(f"   - Individual crop analytics")
        print(f"   - Disease management")
        print(f"   - Activity scheduling")
        
        return user

if __name__ == '__main__':
    create_comprehensive_demo_farmer()
